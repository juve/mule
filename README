INTRODUCTION
------------
Mule is designed to help manage files for workflow applications. Unlike
tightly-coupled distributed applications, in which processes communicate
directly using network sockets, workflows typically communicate by writing
data to files. In order to function in a distributed environment these
files must be accessible by all nodes. This can be done by transferring
the files between nodes, or it can be done by using a network file system.
Network file systems are available on most HPC clusters. In other systems
like grids and clouds a network file system may not be available. To run
in the latter environments, workflow systems usually function by copying
input and output files for each job. Needless to say, this adds substantial
overhead because each file needs to be copied multiple times (once when
it is created, and once for each time it is used). An alternative is to 
cache the files on the worker nodes, and transfer them directly between
nodes. This is the model that Mule supports. Each worker node stores copies
of all the files generated by jobs that run on that node, or accessed by
jobs that run on that node. In order to find files that may have been
generated on another node, there is a global replica catalog that stores
the URLs for each replica of a file. When a node needs a file that is not
in its cache, it looks it up in the replica catalog and requests it from
one of the nodes where it is cached. When a node generates a file it saves
it in the cache and registers it in the replica catalog.

COMPONENTS
----------
Mule consists of 3 components: a replica location service (RLS), an Agent, 
and a Client. There is one RLS per cluster. The RLS stores mappings from
globally-unique LFNs to PFNs. It is an XML-RPC server that supports
add(lfn, pfn), lookup(lfn) => pfn[], and delete(lfn, pfn). In addition
to the RLS, there is an Agent that runs on each node. The agent
manages a local file cache and contacts the RLS server to find LFNs
that are not in its cache, and to update RLS with the LFNs that are in
its cache. The Agent is an XML-RPC server that supports get(lfn, path),
put(path, lfn), and delete(lfn). The Client is a command-line interface
to the Agent. The Client issues get, put and delete commands to service
requests from the workflow.