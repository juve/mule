#!/usr/bin/env python
from optparse import OptionParser
import os
import sys
import re

home = os.path.dirname(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(home, "lib"))

from mule import bits

UPDATE = True
SIZE = 36*1024*8
HASHES = 3
REQUIRE = None
PRIORITY = False

def get_sub_files(directory):
	result = []
	for root, dirs, files in os.walk(directory):
		subfiles = [os.path.join(root,f) for f in files if f.endswith(".sub")]
		result += subfiles
	return result
	
def generate_classads(bloom):
	ads = len(bloom)
	
	if ads == 1:
		filters = ['+BloomFilter = "%s"' % bloom]
		rank = [ "MY.BloomFilter", "BloomFilter" ]
	else:
		chunk = len(bloom) // CLASSADS
		rem = len(bloom) % CLASSADS
		start = 0
		for i in range(0, CLASSADS):
			end = min(len(bloom), (start + chunk))
			filters.append('+BloomFilter%d = "%s"' % (i, bloom[start,end]))
			rank.append("MY.BloomFilter%d"%i, "BloomFilter%d"%i)
			start = end
	
	return "\n".join(filters) + "\nrank = bloom_compare(%s)" % "\n".join(rank)
	

match_get = re.compile("mule[ ]+get[ ]+([^ ]+)")
def update_sub_file(subfile):
	infile = subfile.replace(".sub",".in")
	if not os.path.isfile(infile):
		sys.stderr.write("WARNING: %s does not have an input file\n" % subfile)
		return
	
	# Get all the input files for the job
	inputs = []
	f = open(infile)
	for line in f.readlines():
		m = match_get.search(line)
		if m:
			inputs.append(m.group(1))
	f.close()
	
	if len(inputs) == 0:
		sys.stderr.write("WARNING: %s does not have any inputs\n" % subfile)
		return
	
	# Generate bloom filter
	bf = bits.BloomFilter(SIZE, HASHES)
	for f in inputs:
		bf.add(f)
	bloom = bf.tobase64()
	
	# Write bloom filter to bloom files
	bloomfile = subfile.replace(".sub",".bloom")
	print "Writing %s..." % bloomfile
	f = open(bloomfile,"w")
	f.write(''.join(bloom))
	f.close()
	
	# Update subfile
	if UPDATE:
		print "Updating %s..." % subfile
		for i in range(0,1000):
			oldfile = "%s.%03d" % (subfile, i)
			if not os.path.exists(oldfile):
				break
		os.rename(subfile, oldfile)
		x = open(oldfile, 'r')
		y = open(subfile, 'w')
		requirements = None
		for line in x.readlines():
			if line.lower().strip().startswith("queue"):
				rank = []
				for i in range(0, len(bloom)):
					y.write('+BloomFilter%d = "%s"\n' % (i, bloom[i]))
					rank.append('MY.BloomFilter%d, BloomFilter%d'%(i,i))
				y.write('rank = bloom_compare(%s)\n' % ', '.join(rank))
				if PRIORITY:
					y.write('priority = %d\n' % len(inputs)) # priority = no. input files
				if REQUIRE:
					required = REQUIRE * HASHES * len(inputs)
					compare = "bloom_compare(%s) >= %f" % (', '.join(rank), required)
					if requirements:
						y.write('requirements = (%s)&&(%s)\n' % (requirements,compare))
					else:
						y.write('requirements = (%s)\n' % compare)
				else:
					if requirements:
						y.write('requirements = %s\n' % requirements)
				y.write(line)
			elif line.lower().strip().startswith("rank"):
				pass
			elif line.lower().strip().startswith("priority"):
				if PRIORITY:
					pass
				else:
					y.write(line)
			elif line.lower().strip().startswith("requirements"):
				rec = line.split(" =")
				requirements = rec[1].strip()
			elif line.startswith("+BloomFilter"):
				pass
			else:
				y.write(line)
		y.close()
		x.close()
	
	
def update_jobs(directory):
	if not os.path.isdir(directory):
		sys.stderr.write("WARNING: %s is not a directory\n" % directory)
		return
		
	print "Processing",directory
	
	subfiles = get_sub_files(directory)
	for subfile in subfiles:
		update_sub_file(subfile)
	
def main():
	global UPDATE, SIZE, HASHES, CLASSADS, REQUIRE, PRIORITY
	parser = OptionParser("Usage: %prog [options] DIR...")
	parser.add_option("-n", "--noupdate", action="store_false",
		dest="update", default=UPDATE, 
		help="Do not update submit files [default: update]")
	parser.add_option("-m", "--size", action="store", type="int",
		dest="size", metavar="M", default=SIZE,
		help="Size of bloom filter [default: %default]")
	parser.add_option("-k", "--hashes", action="store", 
		dest="hashes", default=HASHES, metavar="K", type="int",
		help="Number of hashes [default: %default]")
	parser.add_option("-r", "--require", action="store",
		dest="require", default=None, metavar="P", type="float",
		help="Require number of matched files to be >= P fraction of # inputs")
	parser.add_option("-p", "--priority", action="store_true",
		dest="priority", default=PRIORITY, 
		help="Add priority to jobs")
	(options, args) = parser.parse_args()
	
	if len(args) == 0:
		parser.error("Specify at least one submit directory")
	
	UPDATE = options.update
	SIZE = options.size
	HASHES = options.hashes
	REQUIRE = options.require
	if REQUIRE and (REQUIRE > 1 or REQUIRE < 0):
		parser.error("--require must be between 0 and 1")
	PRIORITY = options.priority
	
	for d in args:
		update_jobs(d)
	
if __name__ == '__main__':
	main()
